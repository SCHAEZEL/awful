// not helpful... #line 2 "au_ccode_template.cpp"

#include "mex.h"
#include "matrix.h"
#include <math.h>

// Autogenerated by au_ccode
// FROM: out

/*
 * ccode_mex_template.cpp - outline code for mlp_ccode
 * awf@microsoft.com, Apr 2011
 */

extern "C"
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[])
{
  
  if(nrhs!= 2) 
    mexErrMsgTxt("2 inputs required.");

  if(nlhs!=1)
    mexErrMsgTxt("One output required.");
  
  //  get dimensions from first input
  mwSize mrows = (mwSize)mxGetM(prhs[0]);
  mwSize ncols = (mwSize)mxGetN(prhs[0]);

  // Check the others match
  for(int i = 1; i < nrhs; ++i)
    if (mxGetM(prhs[i]) != mrows || mxGetN(prhs[i]) != ncols)
        mexErrMsgTxt("All args should be the same size");

  /* check to make sure the first input argument is a scalar */
  for(int i = 0; i < nrhs; ++i)
  if( !mxIsDouble(prhs[i]) || mxIsComplex(prhs[i]) ) {
    mexErrMsgTxt("Input x must be double.");
  }
  
  /*  set the output pointer to the output matrix */
  mwSize out_rows = 3;
  mwSize out_cols = 2;
  mwSize dims[4];
  dims[0] = out_rows;
  dims[1] = out_cols;
  dims[2] = mrows;
  dims[3] = ncols;
  plhs[0] = mxCreateNumericArray(4, dims,  mxDOUBLE_CLASS, mxREAL);
  
  /*  create a C pointer to a copy of the output matrix */
  double* out = mxGetPr(plhs[0]);

  
  double* ptr_u = mxGetPr(prhs[0]);
  double* ptr_v = mxGetPr(prhs[1]);
  
  for(int c_in = 0; c_in < ncols; ++c_in) 
    for(int r_in = 0; r_in < mrows; ++r_in) 
    {
       double *out_ptr = out + out_rows*out_cols*(c_in * mrows + r_in);
         /* inner loop */
  double in_u = ptr_u[c_in*mrows + r_in];

  double in_v = ptr_v[c_in*mrows + r_in];

    double t2 = log(in_v);
    double t3 = cos(t2);
    double t4 = sin(in_u);
    double t5 = 1.0/in_v;
    double t6 = sin(t2);
    double t7 = cos(in_u);
    double t9 = t3*t3;
    double t12 = t6*t6;
    double t14 = t4*t5*t7*t9;
    double t15 = t4*t5*t7*t12;
    double t8 = t14+t15;
    double t10 = t4*t4;
    double t11 = 1.0/(in_v*in_v);
    double t13 = t10*t10;
    double t16 = t8*t8;
    double t17 = t9*t11*t13;
    double t18 = t11*t12*t13;
    double t19 = t16+t17+t18;
    double t20 = 1.0/sqrt(t19);
  out_ptr[0 * out_rows + 0] = t3*t4;
  out_ptr[1 * out_rows + 0] = t3*t5*t10*t20;
  out_ptr[0 * out_rows + 1] = t4*t6;
  out_ptr[1 * out_rows + 1] = t5*t6*t10*t20;
  out_ptr[0 * out_rows + 2] = t7;
  out_ptr[1 * out_rows + 2] = t8*t20;

    }
}
